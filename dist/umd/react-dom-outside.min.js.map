{"version":3,"file":"react-dom-outside.min.js","sources":["../../src/lib/ActiveBase.tsx","../../src/ActiveBoundary.tsx","../../src/Active.tsx"],"sourcesContent":["import React from 'react';\n\ntype ActiveBaseProps = {\n  isActive: boolean;\n  setIsActive: React.Dispatch<React.SetStateAction<boolean>>;\n  children?: React.ReactNode;\n  style?: object;\n};\n\nconst ActiveBase = React.forwardRef(\n  (\n    { isActive, setIsActive, children, style, ...rest }: ActiveBaseProps,\n    ref: React.Ref<HTMLDivElement>,\n  ) => {\n    return (\n      <div\n        {...rest}\n        ref={ref}\n        style={{ flex: 1, ...(style || {}) }}\n        onClick={(event) => {\n          event.stopPropagation();\n          setIsActive(!isActive);\n        }}\n      >\n        {children}\n      </div>\n    );\n  },\n);\nexport default ActiveBase;\n","import React from 'react';\n\nimport { useEvent } from 'react-dom-event';\nimport { BoundaryProvider, useBoundary, useRef } from 'react-ref-boundary';\n\n// @ts-ignore\nimport ActiveBase from './lib/ActiveBase.tsx';\n\nfunction ActiveComponent({ isActive, setIsActive, children, ...rest }) {\n  const ref = useRef<HTMLElement>(null);\n  const boundary = useBoundary();\n\n  useEvent(\n    (event) => {\n      if (!isActive) return;\n      for (let i = 0; i < boundary.refs.length; i++) {\n        const x = boundary.refs[i] as React.RefObject<HTMLElement>;\n        if (x.current && x.current.contains(event.target)) return;\n      }\n      setIsActive(false);\n    },\n    [isActive, setIsActive],\n  );\n\n  return (\n    <ActiveBase\n      isActive={isActive}\n      setIsActive={setIsActive}\n      ref={ref}\n      {...rest}\n    >\n      {children}\n    </ActiveBase>\n  );\n}\n\nexport default function ActiveBoundaryNative({ children, ...rest }) {\n  const state = React.useState<boolean>(false);\n  const isActive = state[0];\n  const setIsActive = state[1];\n  const Component = isActive ? ActiveComponent : ActiveBase;\n  return (\n    <BoundaryProvider>\n      <Component {...rest} isActive={isActive} setIsActive={setIsActive}>\n        {React.Children.map<React.ReactNode, React.ReactNode>(\n          children,\n          (child) =>\n            React.isValidElement(child)\n              ? React.cloneElement(child, { isActive, setIsActive })\n              : child,\n        )}\n      </Component>\n    </BoundaryProvider>\n  );\n}\n","import React from 'react';\n\nimport { useEvent } from 'react-dom-event';\n\n// @ts-ignore\nimport ActiveBase from './lib/ActiveBase.tsx';\n\nfunction ActiveComponent({ isActive, setIsActive, children, ...rest }) {\n  const ref = React.useRef<HTMLElement>(null);\n\n  useEvent(\n    (event) => {\n      if (!isActive) return;\n      if (ref.current && ref.current.contains(event.target)) return;\n      setIsActive(false);\n    },\n    [isActive, setIsActive],\n  );\n\n  return (\n    <ActiveBase\n      isActive={isActive}\n      setIsActive={setIsActive}\n      ref={ref}\n      {...rest}\n    >\n      {children}\n    </ActiveBase>\n  );\n}\n\nexport default function Active({ children, ...rest }) {\n  const state = React.useState<boolean>(false);\n  const isActive = state[0];\n  const setIsActive = state[1];\n  const Component = isActive ? ActiveComponent : ActiveBase;\n  return (\n    <Component {...rest} isActive={isActive} setIsActive={setIsActive}>\n      {React.Children.map<React.ReactNode, React.ReactNode>(children, (child) =>\n        React.isValidElement(child)\n          ? React.cloneElement(child, { isActive, setIsActive })\n          : child,\n      )}\n    </Component>\n  );\n}\n"],"names":["_defineProperty","obj","key","value","ActiveBase","React","forwardRef","_param","ref","isActive","setIsActive","children","style","rest","_objectWithoutProperties","createElement","div","_extends","_objectSpread","flex","onClick","event","stopPropagation","ActiveComponent","useRef","boundary","useBoundary","useEvent","i","refs","length","x","current","contains","target","state","useState","Component","Children","map","child","isValidElement","cloneElement","BoundaryProvider"],"mappings":"ofAAA,SAAAA,EAAAC,EAAAC,EAAAC,q/BASA,IAAMC,EAAaC,EAAAA,QAAMC,YACvB,SAAAC,EAEEC,GADEC,IAAAA,EAAAA,EAAAA,SAAUC,IAAAA,YAAaC,EAAQJ,EAARI,SAAUC,EAAAA,EAAAA,MAAUC,EAAIC,EAAAP,EAAA,CAA/CE,WAAUC,cAAaC,WAAUC,UAGnC,OACEP,EAAAA,QAAAU,cAACC,MAAGC,EAAA,GACEJ,EAAI,CACRL,IAAKA,EACLI,MAAOM,EAAA,CAAEC,KAAM,GAAOP,GAAS,IAC/BQ,QAAS,SAACC,GACRA,EAAMC,kBACNZ,GAAaD,MAGdE,MCxBT,SAAAM,2jBAQA,SAASM,EAAgBhB,GAAEE,IAAAA,EAAFF,EAAEE,SAAUC,EAAZH,EAAYG,YAAaC,EAAzBJ,EAAyBI,SAAaE,IAAtCN,EAA4C,CAA1CE,WAAUC,cAAaC,aAC1CH,EAAMgB,SAAoB,MAC1BC,EAAWC,EAAAA,cAcjB,OAZAC,EAAQA,UACN,SAACN,GACC,GAAKZ,EAAL,CACA,IAAK,IAAImB,EAAI,EAAGA,EAAIH,EAASI,KAAKC,OAAQF,IAAK,CAC7C,IAAMG,EAAIN,EAASI,KAAKD,GACxB,GAAIG,EAAEC,SAAWD,EAAEC,QAAQC,SAASZ,EAAMa,QAAS,OAErDxB,GAAY,MAEd,CAACD,EAAUC,IAIXL,wBAACD,EAAUa,EAAA,CACTR,SAAUA,EACVC,YAAaA,EACbF,IAAKA,GACDK,GAEHF,GC/BP,SAAAM,2jBAOA,SAASM,EAAgBhB,GAAEE,IAAAA,EAAFF,EAAEE,SAAUC,EAAZH,EAAYG,YAAaC,EAAzBJ,EAAyBI,SAAaE,IAAtCN,EAA4C,CAA1CE,WAAUC,cAAaC,aAC1CH,EAAMH,EAAAA,QAAMmB,OAAoB,MAWtC,OATAG,EAAQA,UACN,SAACN,GACMZ,IACDD,EAAIwB,SAAWxB,EAAIwB,QAAQC,SAASZ,EAAMa,SAC9CxB,GAAY,MAEd,CAACD,EAAUC,IAIXL,wBAACD,EAAUa,EAAA,CACTR,SAAUA,EACVC,YAAaA,EACbF,IAAKA,GACDK,GAEHF,YAKQ,SAAgBJ,GAAEI,IAAAA,EAAFJ,EAAEI,SAAaE,IAAfN,EAAqB,CAAnBI,aACzBwB,EAAQ9B,EAAAA,QAAM+B,UAAkB,GAChC3B,EAAW0B,EAAM,GACjBzB,EAAcyB,EAAM,GACpBE,EAAY5B,EAAWc,EAAkBnB,EAC/C,OACEC,EAAAA,QAAAU,cAACsB,EAASpB,EAAA,GAAKJ,EAAI,CAAEJ,SAAUA,EAAUC,YAAaA,IACnDL,EAAK,QAACiC,SAASC,IAAsC5B,GAAU,SAAC6B,UAC/DnC,EAAAA,QAAMoC,eAAeD,GACjBnC,EAAK,QAACqC,aAAaF,EAAO,CAAE/B,SAAAA,EAAUC,YAAAA,IACtC8B,wBDLG,SAA8BjC,GAAEI,IAAAA,EAAFJ,EAAEI,SAAaE,IAAfN,EAAqB,CAAnBI,aACvCwB,EAAQ9B,EAAAA,QAAM+B,UAAkB,GAChC3B,EAAW0B,EAAM,GACjBzB,EAAcyB,EAAM,GACpBE,EAAY5B,EAAWc,EAAkBnB,EAC/C,OACEC,wBAACsC,EAAgBA,iBAAA,KACftC,EAAAA,QAACgC,cAAAA,OAAcxB,EAAI,CAAEJ,SAAUA,EAAUC,YAAaA,IACnDL,EAAK,QAACiC,SAASC,IACd5B,GACA,SAAC6B,UACCnC,EAAAA,QAAMoC,eAAeD,GACjBnC,EAAK,QAACqC,aAAaF,EAAO,CAAE/B,SAAAA,EAAUC,YAAAA,IACtC8B"}